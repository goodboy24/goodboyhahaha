#include"Llist.h"
#include<stdlib.h>
#include<assert.h>
#include<stdio.h>
#include<stdlib.h>
void SListInit(SList* pl)
{
	pl->PHead=NULL;
}
//创建新的节点
Node* BuyNode(SDataType a)
{
	Node* NewNode = malloc(sizeof(Node));
	if (NULL == NewNode)
	{
		assert(0);
	}
	NewNode->_data = a;
	NewNode->_pNext = NULL;
	return NewNode;
}

// 在链表中尾插值为data的节点 
void SListPushBack(SList* pl, SDataType data)
{
	Node* cur = pl->PHead;
	Node* NewNode = NULL;
	assert(pl);
	NewNode = BuyNode(data);
	if (NULL == cur)
	{
		pl->PHead = NewNode;
		NewNode->_pNext = NULL;
		return;
	}
	while (cur->_pNext)
	{
		cur = cur->_pNext;
	}
	cur->_pNext = NewNode;
	NewNode->_data = data;
	NewNode->_pNext = NULL;
}
// 销毁链表 
void SListDestroy(SList* pl)
{
	assert(pl);
	Node*cur = pl->PHead;
	Node*del = NULL;
	while (cur)
	{
		del = cur;
		cur = cur->_pNext;
		free(del);
		del = NULL;
	}
}
// 删除链表最后一个节点 
void SListPopBack(SList* pl)
{
	assert(pl);
	if (NULL == pl->PHead)
	{
		return;
	}
	else if (NULL == pl->PHead->_pNext)
	{
		free(pl->PHead);
		pl->PHead = NULL;
	}
	else//有两种方法
	{
		Node* re = NULL;
		Node* cur = pl->PHead;
		while (NULL == cur->_pNext->_pNext)
		{
			cur = cur->_pNext;
		}
		re = cur->_pNext;
		free(cur->_pNext);
		re = NULL;

	}
}

// 在链表第一个元素前插入值为data的节点 
void SListPushFront(SList* pl, SDataType data)
{
	assert(pl);
	Node * NewNode= BuyNode(data);
	NewNode->_pNext = pl->PHead;
	pl->PHead = NewNode;
}
// 删除链表中第一个节点 1 2 3 4 5
void SListPopFront(SList* pl)
{
	assert(pl);
	if (NULL == pl)
	{
		return;
	}
	Node* cur = pl->PHead;
	pl->PHead = pl->PHead->_pNext;
	free(cur);
	cur = NULL;
}
// 删除链表中值为data的节点 
void SListErase(SList* pl, SDataType data)//考虑时间复杂度和空间复杂度
{
	Node* cur = NULL;
	Node* del = NULL;
	Node* pre = NULL;
	while (cur->_pNext)
	{
		if (data == cur->_data)
		{
			//要删除的节点在第一个
			if (cur == pl->PHead)
			{
				SListPopFront(pl);
			}
			else//不在第一个位置
			{
				del = cur;
				pre->_pNext = cur->_pNext;
				free(cur);
				free(del);
				cur = NULL;
				del = NULL;
			}
		}
		pre = cur;
		cur = cur->_pNext;
	}
}
// 在链表中查找值为data的节点，找到返回该节点的地址，否则返回空 
Node* SListFind(SList* pl, SDataType data)
{
	Node* cur = pl->PHead;
	assert(pl);
	if (NULL == pl->PHead)
	{
		return NULL;
	}
	while (cur)
	{
		if (data == cur->_data)
		{
			return cur;
		}
		cur = cur->_pNext;
	}
	return NULL;
}
// 获取链表中有效节点的个数 
int SListSize(SList* pl)
{
	Node* cur = pl->PHead;
	int count = 0;
	while(cur)
	{
		count++;
		cur = cur->_pNext;
	}
	return count;
}
// 检测链表是否为空 
int SListEmpty(SList* pl)
{
	if (pl->PHead ==NULL)
	{
		return 1;
	}
	return 0;
}
// 获取链表的第一个节点 
Node* SListFront(SList* pl)
{
	return(pl->PHead);
}

// 获取链表的第二个节点 
Node* SListBack(SList* pl)
{
	return (pl->PHead->_pNext);
}
/////////////////////////////////////////////////////////////////
//测试模块，打印
void Printf(SList* pl)
{
	Node* cur = NULL;
	assert(pl);
	cur = pl->PHead;
	while (cur)
	{
		printf("%d--->", cur->_data);
		cur = cur->_pNext;
	}
	printf("\n");
}
#define SDataType int 

//结点
typedef struct SListNode
{
	SDataType _data;
	struct SListNode* _pNext;
}Node;
//链表结构
typedef struct SList
{
	Node* PHead;
}SList;
//初始化
void SListInit(SList* pl);
// 在链表中尾插值为data的节点 
void SListPushBack(SList* pl, SDataType data);
// 删除链表最后一个节点 
void SListPopBack(SList* pl);
// 在链表第一个元素前插入值为data的节点 
void SListPushFront(SList* pl, SDataType data);
//测试模块，打印
void Printf(SList* pl);
// 销毁链表 
void SListDestroy(SList* pl);
// 删除链表中第一个节点 
void SListPopFront(SList* pl);
// 删除链表中值为data的节点 
// 在链表中查找值为data的节点，找到返回该节点的地址，否则返回空 
Node* SListFind(SList* pl, SDataType data);
// 获取链表中有效节点的个数 
int SListSize(SList* pl);
// 检测链表是否为空 
int SListEmpty(SList* pl);
// 获取链表的第一个节点 
Node* SListFront(SList* pl);

